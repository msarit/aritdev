I"Å<p>My team was building several React components for the front-end of what would be a highly-trafficked app. One of these components required that if the page‚Äôs subtitle was longer than 70 characters, we inserted a break at the 70-character point, for the sentence to continue on a new line. Checking the database, we determined that no page‚Äôs subtitle was longer than 140 characters. So we‚Äôd probably need to break subtitles only once.</p>

<p>Another dev had created the subtitle component, and I was tasked with adding another feature to it. I opened the file and saw this function for fulfilling the subtitle‚Äôs 70-character width requirement:</p>

<p>{% gist 5d3ff91517fffbf3c0e4da7f6f3b261b %}</p>

<p>It took me several minutes to understand what the function was doing:</p>
<ul>
  <li>First the sentence (<strong><em><code class="language-plaintext highlighter-rouge">string</code></em></strong>) is split into an array of its words (<strong><em><code class="language-plaintext highlighter-rouge">tokens</code></em></strong>), and a counter <code class="language-plaintext highlighter-rouge">i</code> is initialized to 1.</li>
  <li>Next, accounting for spacing, we add the lengths of each word in <strong><em><code class="language-plaintext highlighter-rouge">tokens</code></em></strong> together. With each addition, we check if the total is less than 70; if so, we add the length of the next word to our total.</li>
  <li>The goal is to identify the word before which the sentence is at or just below 70 characters (indicated by the incrementing <code class="language-plaintext highlighter-rouge">i</code> value), and then break the sentence at that word (this is what the <code class="language-plaintext highlighter-rouge">return</code> line does).</li>
</ul>

<p>The approach was effective; it met task requirements. <strong>But could it be simpler?</strong></p>

<p>I thought so, and googled ‚Äúlimit sentence length to number of characters html css‚Äù. I discovered the <code class="language-plaintext highlighter-rouge">ch</code> property, one of several font-relative CSS units. <code class="language-plaintext highlighter-rouge">1ch</code> is equal to the width of the zero (‚Äò0‚Äô) character of the current font-family, at the current font-size. It is important to note that the <code class="language-plaintext highlighter-rouge">ch</code> value will change for different font-families. But considering that my team follows very strict typography standards, I wasn‚Äôt worried about this potential variation in the <code class="language-plaintext highlighter-rouge">ch</code> value.</p>

<p>I deleted the Javascript function and then, within CSS, I set the maximum width of the subtitle‚Äôs container equal to <code class="language-plaintext highlighter-rouge">70ch</code>:</p>

<p>{% gist 008bf63baaac95ff5af6d299a099f24d %}</p>

<p>5 lines of Javascript replaced by 1 line of CSS. Ooooh, it was satisfying indeed when my fellow devs reviewed and embraced my implementation as the better approach indeed.</p>

<hr />

<p>As a bootcamp-educated developer, I would always feel the pressure to quickly level up to the ‚Äòhigher‚Äô programming languages, and ‚Äògraduate‚Äô from HTML and CSS. With more experience, however, I‚Äôm finding that it is not about how ‚Äòloaded‚Äô my developer tool belt is. It always comes back to: How can I solve this problem, or implement this feature? How simple is my solution? How understandable? How maintainable?</p>

<p>{% include tweet-card.html quote=‚ÄùIt‚Äôs not about how bloated our developer tool belts are. It always comes back to: How can I solve this problem? How simple is my implementation? How understandable? How maintainable?‚Äù %}</p>
:ET