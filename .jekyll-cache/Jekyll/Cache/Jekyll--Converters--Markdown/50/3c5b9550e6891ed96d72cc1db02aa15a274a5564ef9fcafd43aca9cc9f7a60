I"R<p>Today at work, my teammate reviewed the following code I had written:</p>

<p>{% gist a8aa9667832e3d50091e5d388e137ef1 %}</p>

<p>In a nutshell, my <code class="language-plaintext highlighter-rouge">build_page_data</code> method builds an object called <code class="language-plaintext highlighter-rouge">categories</code> which contains a number of objects (each one representing a <code class="language-plaintext highlighter-rouge">category</code>). The variable <code class="language-plaintext highlighter-rouge">@page_data</code> contains several rows of information where, for one <code class="language-plaintext highlighter-rouge">group_id</code>, there are several <code class="language-plaintext highlighter-rouge">features</code>. So, there could be 10 rows each with the same <code class="language-plaintext highlighter-rouge">group_id</code>, but with a distinct <code class="language-plaintext highlighter-rouge">feature</code>.</p>

<p>My teammate - let’s call him “David” - commented that Lines 7, 8 &amp; 18 confused him and weren’t terribly intuitive. I explained to him how the loop on Line 7 checked to see if we’d moved unto a new <code class="language-plaintext highlighter-rouge">group_id</code> to build a new <code class="language-plaintext highlighter-rouge">category</code> object, while Line 8 populated the <code class="language-plaintext highlighter-rouge">features</code> attribute of the last <code class="language-plaintext highlighter-rouge">category</code> object (after being sure that we’d collected all associated features). Line 18 made sure to populate the last row’s <code class="language-plaintext highlighter-rouge">features</code> attribute (edge case).</p>

<p>Did my explanation bring on a headache for you just now? Because it did for David. He asked me if there was a way to build the data without keeping track of which row I was currently on (i.e. using a pointer). He suggested that:</p>

<ol>
  <li>If the <code class="language-plaintext highlighter-rouge">categories</code> object did not have a hash with the <code class="language-plaintext highlighter-rouge">group_id</code> of the row I was on, then I could be sure that I was on a new <code class="language-plaintext highlighter-rouge">group_id</code></li>
  <li>As long as the <code class="language-plaintext highlighter-rouge">group_id</code> didn’t change with each iteration, I could simply push the <code class="language-plaintext highlighter-rouge">features</code> hashes into the features array for that category</li>
</ol>

<p>{% include tweet-card.html quote=”As a #CodeNewbie, I’m learning to challenge myself by asking: Can my code be simpler? What can I do away with and still accomplish my goal?” %}</p>

<p>I went back to <del>the drawing board</del> my IDE and worked on implementing David suggestions. First, in the loop iterating through <code class="language-plaintext highlighter-rouge">@page_data</code>, I included a guard that made sure that either a category with the current <code class="language-plaintext highlighter-rouge">group_id</code> existed, or one was created. Next, I pushed the <code class="language-plaintext highlighter-rouge">features</code> of each row into the features array of their associated category. Finally I returned the completed <code class="language-plaintext highlighter-rouge">categories</code> object:</p>

<p>{% gist 43549390817935ef860e05c1ac2801af %}</p>

<p>I sat back and marveled at the <strong>simplicity</strong> of my refactored <code class="language-plaintext highlighter-rouge">build_page_data</code> method! All edge cases were accounted for, and I had cut the size of my method in HALF (from 16 lines to 8)! This experience exemplifies why I’m so grateful for my current role - I am learning at what sometimes feels like an exponential rate, and getting paid while doing so! This refactor brought me such satisfaction, and challenged me to always ask: “Can my code be simpler? What can I do away with and still accomplish my goal?” I’m also grateful for a team that <del>teaches me to fish</del> challenges me to think and grow, rather than simply hand me the answers.</p>
:ET